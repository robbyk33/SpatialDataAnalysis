---
title: "Hw08 - Geostatistics Homework (Prediction)"
format: html
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

The `cow.rda` file contains a data frame with 200 spatial observations observed throughout the state of Colorado.  The data frame includes `easting` and `northing` coordinates (UTM, scaled by 1000 meters) and Tungsten measurements (`W`) at each site (mg/kg). Read in the data as a data frame from the file.  

# Preliminaries

Load the **gstat** and **geoR** packages. Load the `cow.rda` file.

# Problem 0

Create `cow_sf`, an `sf` version of `cow` that uses `easting` and `northing` for `coords`. 

Create `geocow`, a `geodata` object from the **geoR** package.


Also run the following code.


**Solution**
```{r}
library(gstat)
library(geoR)

load('cow.rda')  # load data
cow_sf <- sf::st_as_sf(cow,coords=c('easting','northing'))

geocow <- as.geodata(cbind(cow$easting, cow$northing, cow$W))

set.seed(1)
poly_sf <- sf::st_polygon(x = list(cbind(
  c(152, 152, 753, 753, 152),
  c(4100, 4544, 4544, 4100, 4100))))

grid_sf <- sf::st_sample(poly_sf, size = 100,
                         type = "regular")

```


# Problem 1 (Using geoR)

Use REML estimation with a constant mean function to fit the following covariance models to the data:

a. An isotropic spherical model.
b. A geometric anisotropic spherical model.
c. An isotropic exponential model.
d. A geometric anisotropic exponential model.

Make a table that provides the following information about each model: model, partial sill ($c$), range parameter ($a$ or $a_{min}$), nugget ($c_0$), direction of the major axis in degrees, (if appropriate), anisotropy ratio $a_{max}/a_{min}$, AIC of the fit.

Note: starting values make a HUGE difference for the anisotropic models, so you probably want to experiment a bit.

Which model is the best choice?

**Solution**
```{r}

# estimated directional semivariogram

# directions = c(0, 45, 90, 135)/180*pi
# directions = c(15, 60, 105, 150)/180*pi
directions = c(25, 70, 115, 160)/180*pi
# directions = c(35, 80, 125, 170)/180*pi

vhat = variog4(geocow,
               direction = directions,
               max.dist = 500)
plot(vhat)

# choose starting a_min

# amin <- directions[1]
amin <- directions[2]
# amin <- directions[3]
# amin <- directions[4]

fix_angle = FALSE

model_list <- list()

#########################
# isotropic spherical
iso_fitsph = likfit(geocow,
                  ini.cov.pars = c(1.5, 100),
                  nugget = 0,
                  cov.model = "spherical",
                  lik.method = "REML")
iso_fitsph 
summary(iso_fitsph)

model_list[[1]] = iso_fitsph


######################
# anisotropic spherical
aniso_fitsph = likfit(geocow, ini.cov.pars = c(1.5, 100),
               nugget = 0,
               cov.model = "spherical",
               lik.method = "REML",
               psiA = amin, psiR = 2,
               fix.psiR = FALSE,fix.psiA = fix_angle)
aniso_fitsph
summary(aniso_fitsph)

model_list[[2]] = aniso_fitsph

#########################
# isotropic exponential
iso_fitexp = likfit(geocow,
                  ini.cov.pars = c(1.5, 100),
                  nugget = 0,
                  cov.model = "exponential",
                  lik.method = "REML")
iso_fitexp 
summary(iso_fitexp)

model_list[[3]] = iso_fitexp

########################
# anisotropic exponential

aniso_fitexp = likfit(geocow, ini.cov.pars = c(1.5, 100),
               nugget = 0,
               cov.model = "exponential",
               lik.method = "REML",
               psiA = amin, psiR = 2,
               fix.psiR = FALSE,fix.psiA = fix_angle)
aniso_fitexp
summary(aniso_fitexp)

model_list[[4]] = aniso_fitexp

# 
# model: model, partial sill ($c$), range parameter ($a$ or $a_{min}$), nugget ($c_0$), direction of the major axis in degrees, (if appropriate), anisotropy ratio $a_{max}/a_{min}$, AIC of the fit

tl <- list()
i = 1
for (m in model_list){
  if (m$aniso.pars[[2]]==1){
    d = 'iso'
  } else { d = 'aniso'}
  tl$model[i] = paste(d,m$cov.model)
  tl$psill[i] = m$sigmasq
  tl$range_param[i] = m$phi
  tl$nugget[i] = m$nugget
  tl$AIC[i] = m$AIC
  ta = (m$aniso.pars[[1]]*180/pi)
  if (ta>90){
    tl$major[i] = ta-90
  } else {tl$major[i] = ta+90}
  tl$ratio[i] = m$aniso.pars[[2]]

  i = i+1
}
df <- as.data.frame(tl)
print(df)



```
> The anisotropic exponential model has the lowest AIC score, indicating the best fit of the 4 models.

# Problem 2

Create two `gstat` objects with a constant mean and the directional semivariogram model that matches the REML fit provided below. For the first, assume the nugget is microscale error (standard kriging) while the second is measurement error (filtered kriging).

Reminder: **gstat** and **geoR** parameterize the angle and ratio of the $a_{minor}$ and $a_{major}$ differently, so carefully read the documentation. 

```
Summary of the parameter estimation
-----------------------------------
Estimation method: restricted maximum likelihood 

Parameters of the mean component (trend):
  beta 
0.9343 

Parameters of the spatial component:
   correlation function: exponential
      (estimated) variance parameter sigmasq (partial sill) =  1.158
      (estimated) cor. fct. parameter phi (range parameter)  =  3.276
   anisotropy parameters:
      (fixed) anisotropy angle = 0.7854  ( 45.0001052295748 degrees )
      (fixed) anisotropy ratio = 2

Parameter of the error component:
      (estimated) nugget =  0.102

Transformation parameter:
      (fixed) Box-Cox parameter = 1 (no transformation)

Practical Range with cor=0.05 for asymptotic range: 9.812505

Maximised Likelihood:
   log.L n.params      AIC      BIC 
"-296.1"      "4"  "600.1"  "613.3" 

non spatial model:
   log.L n.params      AIC      BIC 
"-297.6"      "2"  "599.1"  "605.7" 

Call:
likfit(geodata = geocow, ini.cov.pars = c(0.5, 10), fix.nugget = FALSE, 
    nugget = 0.1, fix.psiA = TRUE, psiA = pi/4, fix.psiR = TRUE, 
    psiR = 2, cov.model = "exponential", lik.method = "REML", 
    messages = FALSE)
```

**Solution**
```{r}
library(gstat)
library(sf)


plot(cow_sf["W"], nbreaks = 10, pal = hcl.colors, pch = 20)


# standard kriging
v1 = vgm(psill=0.5, "Exp", range=10, nugget = 0.1, anis = c(45, .5))


# filtered kriging
v2 = vgm(psill=0.5, "Exp", range=10, Err = 0.1, anis = c(45, .5))


# gstat objects with anisotropic variogram models for kriging

v_standard = gstat(id = "W", formula = W ~ 1, data = cow_sf,
                model = v1)


v_filtered = gstat(id = "W", formula = W ~ 1, data = cow_sf,
                model = v2)
```


# Problem 3

Perform standard kriging at the locations contained in `grid_sf` using the `gstat` object created in the previous problem.

Use the `summary` function to summarize your results.

**Solution**
```{r}
# ordinary kriging
ok = predict(v_standard, newdata = grid_sf)
summary(ok)


```


# Problem 4

Perform filtered kriging at the locations contained in `grid_sf` using the `gstat` object created in Problem 2.

Use the `summary` function to summarize your results.

**Solution**
```{r}
# filtered ordinary kriging
fok = predict(v_filtered, newdata = grid_sf)
summary(fok)

```


# Problem 5

Are the predictions for standard and filtered kriging identical for the predictions above? Why?

**Solution**
> Yes, the predictions are the same for standard and filtered kriging because the kriging is predicting values on a stationary omnidirectional grid of points.

# Problem 6

Create side-by-side plots of the kriging variances from Problems 3 and 4 with a common color scale. Which variances are higher?

**Solution**
```{r}
library(ggplot2)

# plot kriging variance from ok model
ggplot(ok) +
  geom_sf(aes(col = W.var)) +
  scale_color_viridis_c(direction = -1,limits = range(.25,.8))+
  labs(title = "Ordinary Kriging")

# plot kriging variance from fok model
ggplot(fok) +
  geom_sf(aes(col = W.var)) +
  scale_color_viridis_c(direction = -1,limits = range(.25, .8))+
  labs(title = "Filtered Kriging")



```
> Ordinary Kriging has higher variances

# Problem 7

Perform standard kriging at the locations contained in `cow_sf` using the `gstat` object created in Problem 2.

Use the `summary` function to summarize your results.

**Solution**
```{r}
# ordinary kriging
ok_cow = predict(v_standard, newdata = cow_sf)
summary(ok_cow)



```


# Problem 8

Perform filtered kriging at the locations contained in `cow_sf` using the `gstat` object created in Problem 2.

Use the `summary` function to summarize your results.

**Solution**
```{r}
# filtered ordinary kriging
fok_cow = predict(v_filtered, newdata = cow_sf)
summary(fok_cow)

```


# Problem 9

Are the standard and unfiltered kriging predictions the same at the observed data locations? Why?

**Solution**
> The predictions are not the same because this time we are predicting values for anisotropic point data.

# Problem 10

What do you notice about the kriging variances for the filtered and unfilted kriging predictions at observed data locations?

**Solution**
> The variances for the ordinary kriging are basically 0 and the variances for the filtered kriging predictions are essentially constant at 0.08.